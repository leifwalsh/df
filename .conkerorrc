// most of this is from http://conkeror.org/Tips

// auto-save and load session
require('session.js');
session_auto_save_auto_load = true;

// use history for completions
url_completion_use_history = true;

// tabs
require('new-tabs.js');
tab_bar_button_close = 1;

// Swap M-x and M-q
define_key(default_global_keymap, "M-q", "execute-extended-command");

// noscript apparently doesn't actually work
//require('noscript');

// Use "F" instead of "C-u f" to follow in a new buffer
define_key(content_buffer_normal_keymap, 'F', 'follow-new-buffer');

// Middle-click to follow in a new buffer
require('clicks-in-new-buffer.js');
clicks_in_new_buffer_target = OPEN_NEW_BUFFER;
clicks_in_new_buffer_button = 1;

// Order buffers according to recency
interactive("switch-to-recent-buffer",
            "Prompt for a buffer and switch to it, displaying the list in last-visited order.",
            function (I) {
                switch_to_buffer(
                    I.window,
                    (yield I.minibuffer.read_buffer(
                        $prompt = "Switch to buffer:",
                        $buffers = I.window.buffers.buffer_history,
                        $default = (I.window.buffers.count > 1 ?
                                    I.window.buffers.buffer_history[1] :
                                    I.buffer))));
            });

define_key(default_global_keymap, "C-x b", "switch-to-recent-buffer");

// Remember killed buffers
var kill_buffer_original = kill_buffer_original || kill_buffer;

var killed_buffer_urls = [];

kill_buffer = function (buffer, force) {
    // I think by the time kill_buffer_hook runs the buffer is gone so I
    // patch kill_buffer
    if (buffer.display_uri_string) {
        killed_buffer_urls.push(buffer.display_uri_string);
    }

    kill_buffer_original(buffer,force);
};

interactive("restore-killed-buffer-url", "Loads url from a previously killed buffer",
            function restore_killed_buffer_url (I) {
                if (killed_buffer_urls.length !== 0) {                
                    var url = yield I.minibuffer.read(
                        $prompt = "Restore killed url:",
                        $completer = all_word_completer($completions = killed_buffer_urls),
                        $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                        $auto_complete = "url",
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $match_required);
                    
                    load_url_in_new_buffer(url);
                } else {
                    I.window.minibuffer.message("No killed buffer urls");
                }
            });

define_key(default_global_keymap, "C-T", "restore-killed-buffer-url");

// readability
define_webjump("readability", "javascript:(%28function%28%29%7Bwindow.baseUrl%3D%27http%3A//www.readability.com%27%3Bwindow.readabilityToken%3D%27%27%3Bvar%20s%3Ddocument.createElement%28%27script%27%29%3Bs.setAttribute%28%27type%27%2C%27text/javascript%27%29%3Bs.setAttribute%28%27charset%27%2C%27UTF-8%27%29%3Bs.setAttribute%28%27src%27%2CbaseUrl%2B%27/bookmarklet/read.js%27%29%3Bdocument.documentElement.appendChild%28s%29%3B%7D%29%28%29)");

///
/// Auto-hide Minibuffer
///

var minibuffer_autohide_timer = null;
var minibuffer_autohide_message_timeout = 3000; //milliseconds to show messages
var minibuffer_mutually_exclusive_with_mode_line = true;

function hide_minibuffer (window) {
    window.minibuffer.element.collapsed = true;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = false;
}

function show_minibuffer (window) {
    window.minibuffer.element.collapsed = false;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = true;
}

add_hook("window_initialize_hook", hide_minibuffer);
// for_each_window(hide_minibuffer); // initialize existing windows


var old_minibuffer_restore_state = (old_minibuffer_restore_state ||
                                    minibuffer.prototype._restore_state);
minibuffer.prototype._restore_state = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (this.current_state)
        show_minibuffer(this.window);
    else
        hide_minibuffer(this.window);
    old_minibuffer_restore_state.call(this);
};

var old_minibuffer_show = (old_minibuffer_show || minibuffer.prototype.show);
minibuffer.prototype.show = function (str, force) {
    var w = this.window;
    show_minibuffer(w);
    old_minibuffer_show.call(this, str, force);
    if (minibuffer_autohide_timer)
        timer_cancel(minibuffer_autohide_timer);
    minibuffer_autohide_timer = call_after_timeout(
        function () { hide_minibuffer(w); },
        minibuffer_autohide_message_timeout);
};

var old_minibuffer_clear = (old_minibuffer_clear || minibuffer.prototype.clear);
minibuffer.prototype.clear = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (! this.current_state)
        hide_minibuffer(this.window);
    old_minibuffer_clear.call(this);
};

// instapaper
if (false) {  // don't know how to securely express password yet
    interactive("instapaper", "Send the current page to InstaPaper.",
                function (I) {
                    check_buffer(I.buffer, content_buffer);
                    let posturl = 'https://www.instapaper.com/api/add?' +
                        'username=leifwalsh&' +
                        'password=PASSWORD&url=' +
                        encodeURIComponent(I.window.content.location.href)
                    '&selection=' +
                        encodeURIComponent(
                            yield I.minibuffer.read(
                                $prompt = "Description (optional): "));
                    try {
                        var content = yield send_http_request(load_spec({uri: posturl}));
                        if (content.responseText == "201") {
                            I.window.minibuffer.message("InstaPaper ok!");
                        } else {
                            I.window.minibuffer.message("Error.");
                        }
                    } catch (e) {
                        I.window.minibuffer.message("Error.");
                    }
                });

    interactive("instapaper-link", "Send the current link to InstaPaper.",
                function (I) {
                    bo = yield read_browser_object(I) ;
                    mylink = load_spec_uri_string(load_spec(encodeURIComponent(bo)));
                    check_buffer(I.buffer, content_buffer);
                    let posturl = 'https://www.instapaper.com/api/add?' +
                        'username=USERNAME&' +
                        'password=PASSWORD&url=' + mylink +
                        '&title=' + encodeURIComponent(
                            yield I.minibuffer.read(
                                $prompt = "Title (optional): ",
                                $initial_value = bo.textContent)) +
                        '&selection=' + encodeURIComponent(
                            yield I.minibuffer.read(
                                $prompt = "Description (optional): ",
                                $initial_value = "From: "+ I.buffer.title +" ("+I.window.content.location.href+")"
                            ));
                    try {
                        var content = yield send_http_request(load_spec({uri: posturl}));
                        if (content.responseText == "201") {
                            I.window.minibuffer.message("InstaPaper ok!");
                        } else {
                            I.window.minibuffer.message("Error.");
                        }
                    } catch (e) {
                        I.window.minibuffer.message("Error.");
                    }
                }, $browser_object = browser_object_links);

    define_key(default_global_keymap, "C-x i", "instapaper");
    define_key(default_global_keymap, "C-x I", "instapaper-link");
}
