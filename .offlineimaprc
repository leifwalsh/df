# Sample configuration file
# Copyright (C) 2002-2005 John Goerzen
# <jgoerzen@complete.org>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Looking for a quick start?  Take a look at offlineimap.conf.minimal.


##################################################
# General definitions
##################################################

[general]

# This specifies where offlineimap is to store its metadata.
# This directory will be created if it does not already exist.

metadata = ~/.offlineimap

# This variable specifies which accounts are defined.  Separate them
# with commas.  Account names should be alphanumeric only.
# You will need to specify one section per account below.  You may
# not use "general" for an account name.
#

accounts = Gmail,Tokutek

# Offlineimap can synchronize more the one account at a time.  If you
# want to enable this feature, set the below value to something
# greater than 1.  To force it to synchronize only one account at a
# time, set it to 1.
#
# Note: if you are using autorefresh and have more than one account,
# you must set this number to be >= to the number of accounts you have;
# since any given sync run never "finishes" due to a timer, you will never
# sync your additional accounts if this is 1.

maxsyncaccounts = 2

# You can specify one or more user interface modules for OfflineIMAP
# to use.  OfflineIMAP will try the first in the list, and if it
# fails, the second, and so forth.
#
# The pre-defined options are:
# Curses.Blinkenlights -- A text-based (terminal) interface similar to
# Tk.Blinkenlights
# TTY.TTYUI -- a text-based (terminal) interface
# Noninteractive.Basic -- Noninteractive interface suitable for cronning
# Noninteractive.Quiet -- Noninteractive interface, generates no output
#                         except for errors.
# Machine.MachineUI -- Interactive interface suitable for machine
#                      parsing.
#
# You can override this with a command-line option -u.

# ui = Curses.Blinkenlights, TTY.TTYUI,
#      Noninteractive.Basic, Noninteractive.Quiet
ui = Noninteractive.Basic

# If you try to synchronize messages to a read-only folder,
# OfflineIMAP will generate a warning.  If you want to suppress these
# warnings, set ignore-readonly to yes.  Read-only IMAP folders allow
# reading but not modification, so if you try to change messages in
# the local copy of such a folder, the IMAP server will prevent
# OfflineIMAP from propagating those changes to the IMAP server.

ignore-readonly = no

########## Advanced settings

# You can give a Python source filename here and all config file
# python snippets will be evaluated in the context of that file.
# This allows you to e.g. define helper functions in the Python
# source file and call them from this config file.  You can find
# an example of this in the manual.
#
# pythonfile = ~/.offlineimap.py
#

# By default, OfflineIMAP will not exit due to a network error until
# the operating system returns an error code.  Operating systems can sometimes
# take forever to notice this.  Here you can activate a timeout on the
# socket.  This timeout applies to individual socket reads and writes,
# not to an overall sync operation.  You could perfectly well have a 30s
# timeout here and your sync still take minutes.
#
# Values in the 30-120 second range are reasonable.
#
# The default is to have no timeout beyond the OS.  Times are given in seconds.
#
socktimeout = 60

# By default, OfflineIMAP will use fsync() to force data out to disk at
# opportune times to ensure consistency.  This can, however, reduce
# performance.  Users where /home is on SSD (Flash) may also wish to reduce
# write cycles.  Therefore, you can disable OfflineIMAP's use of fsync().
# Doing so will come at the expense of greater risk of message duplication
# in the event of a system crash or power loss.  Default is fsync = true.
# Set fsync = false ot disable fsync.
#
# fsync = true

##################################################
# Mailbox name recorder
##################################################

[mbnames]

# offlineimap can record your mailbox names in a format you specify.
# You can define the header, each mailbox item, the separator,
# and the footer.  Here is an example for Mutt.
# If enabled is yes, all six setting must be specified, even if they
# are just the empty string "".
#
# The header, peritem, sep, and footer are all Python expressions passed
# through eval, so you can (and must) use Python quoting.

enabled = no
filename = ~/Mutt/muttrc.mailboxes
header = "mailboxes "
peritem = "+%(accountname)s/%(foldername)s"
sep = " "
footer = "\n"

# You can also specify a folderfilter.  It will apply to the
# *translated* folder name here, and it takes TWO arguments:
# accountname and foldername.  In all other ways, it will
# behave identically to the folderfilter for accounts.  Please see
# that section for more information and examples.
#
# Note that this filter can be used only to further restrict mbnames
# to a subset of folders that pass the account's folderfilter.

[ui.Curses.Blinkenlights]
# Character used to indicate thread status.

statuschar = .

##################################################
# Accounts
##################################################

# This is an account definition clause.  You'll have one of these
# for each account listed in general/accounts above.

[Account Gmail]
########## Basic settings

# These settings specify the two folders that you will be syncing.
# You'll need to have a "Repository ..." section for each one.

localrepository = Local
remoterepository = Gmail

########## Advanced settings

# You can have offlineimap continue running indefinitely, automatically
# syncing your mail periodically.  If you want that, specify how
# frequently to do that (in minutes) here.  You can also specify
# fractional minutes (ie, 3.25).

# autorefresh = 5

# You can tell offlineimap to do a number of quicker synchronizations
# between full updates.  A quick synchronization only synchronizes
# if a Maildir folder has changed, or if an IMAP folder has received
# new messages or had messages deleted.  It does not update if the
# only changes were to IMAP flags.  Specify 0 to never do quick updates,
# -1 to always do quick updates, or a positive integer to do that many
# quick updates between each full synchronization (requires autorefresh).

# quick = 10

# You can specify a pre and post sync hook to execute a external command.
# in this case a call to imapfilter to filter mail before the sync process
# starts and a custom shell script after the sync completes.
# The pre sync script has to complete before a sync to the account will
# start. 

# presynchook = imapfilter
# postsynchook = notifysync.sh

# You can also specify parameters to the commands
# presynchook = imapfilter -c someotherconfig.lua

# If you have a limited amount of bandwidth available you can exclude larger
# messages (e.g. those with large attachments etc).  If you do this it
# will appear to offlineimap that these messages do not exist at all.  They
# will not be copied, have flags changed etc.  For this to work on an IMAP
# server the server must have server side search enabled.  This works with gmail
# and most imap servers (e.g. cyrus etc)
# The maximum size should be specified in bytes - e.g. 2000000 for approx 2MB

# maxsize = 2000000


# When you are starting to sync an already existing account yuo can tell offlineimap
# to sync messages from only the last x days.  When you do this messages older than x
# days will be completely ignored.  This can be useful for importing existing accounts
# when you do not want to download large amounts of archive email.

# Messages older than maxage days will not be synced, their flags will
# not be changed, they will not be deleted etc.  For offlineimap it will be like these
# messages do not exist.  This will perform an IMAP search in the case of IMAP or Gmail
# and therefor requires that the server support server side searching.  This will
# calculate the earliest day that would be included in the search and include all 
# messages from that day until today.   e.g. maxage = 3 to sync only the last 3 days mail

# maxage = 3

[Repository Local]

type = IMAP
remotehost = localhost
port = 143
remoteuser = leif
maxconnections = 1

[Repository Gmail]

# A repository using Gmail's IMAP interface.  Any configuration
# parameter of `IMAP` type repositories can be used here.  Only
# `remoteuser` (or `remoteusereval` ) is mandatory.  Default values
# for other parameters are OK, and you should not need fiddle with
# those.
#
# The Gmail repository will use hard-coded values for `remotehost`,
# `remoteport`, `tunnel` and `ssl`.  (See
# http://mail.google.com/support/bin/answer.py?answer=78799&topic=12814)
# Any attempt to set those parameters will be silently ignored.
#

type = Gmail

# Specify the Gmail user name. This is the only mandatory parameter.
remoteuser = leif.walsh@gmail.com

maxconnections = 1

# Deleting a message from a Gmail folder via the IMAP interface will
# just remove that folder's label from the message: the message will
# continue to exist in the '[Gmail]/All Mail' folder.  If `realdelete`
# is set to `True`, then deleted messages will really be deleted
# during `offlineimap` sync, by moving them to the '[Gmail]/Trash'
# folder.  BEWARE: this will delete a messages from *all folders* it
# belongs to!
#
# See http://mail.google.com/support/bin/answer.py?answer=77657&topic=12815
realdelete = no

# The trash folder name may be different from [Gmail]/Trash
# for example on german googlemail, this setting should be
#
# trashfolder = [Google Mail]/Papierkorb
#
# The same is valid for the spam folder
#
# spamfolder = [Google Mail]/Spam

folderfilter = lambda foldername: foldername in \
    ['[Gmail]/Drafts', '[Gmail]/Sent Mail',
     'INBOX', 'Old-Inbox', 'Facebook', 'Quora', 'Clojure', 'Scala-user',
     'RethinkDB', 'FreeBSD-questions', 'FreeBSD-STABLE']

[Account Tokutek]
########## Basic settings

# These settings specify the two folders that you will be syncing.
# You'll need to have a "Repository ..." section for each one.

localrepository = LocalTokutek
remoterepository = GmailTokutek

########## Advanced settings

# You can have offlineimap continue running indefinitely, automatically
# syncing your mail periodically.  If you want that, specify how
# frequently to do that (in minutes) here.  You can also specify
# fractional minutes (ie, 3.25).

# autorefresh = 5

# You can tell offlineimap to do a number of quicker synchronizations
# between full updates.  A quick synchronization only synchronizes
# if a Maildir folder has changed, or if an IMAP folder has received
# new messages or had messages deleted.  It does not update if the
# only changes were to IMAP flags.  Specify 0 to never do quick updates,
# -1 to always do quick updates, or a positive integer to do that many
# quick updates between each full synchronization (requires autorefresh).

# quick = 10

# You can specify a pre and post sync hook to execute a external command.
# in this case a call to imapfilter to filter mail before the sync process
# starts and a custom shell script after the sync completes.
# The pre sync script has to complete before a sync to the account will
# start. 

# presynchook = imapfilter
# postsynchook = notifysync.sh

# You can also specify parameters to the commands
# presynchook = imapfilter -c someotherconfig.lua

# If you have a limited amount of bandwidth available you can exclude larger
# messages (e.g. those with large attachments etc).  If you do this it
# will appear to offlineimap that these messages do not exist at all.  They
# will not be copied, have flags changed etc.  For this to work on an IMAP
# server the server must have server side search enabled.  This works with gmail
# and most imap servers (e.g. cyrus etc)
# The maximum size should be specified in bytes - e.g. 2000000 for approx 2MB

# maxsize = 2000000


# When you are starting to sync an already existing account yuo can tell offlineimap
# to sync messages from only the last x days.  When you do this messages older than x
# days will be completely ignored.  This can be useful for importing existing accounts
# when you do not want to download large amounts of archive email.

# Messages older than maxage days will not be synced, their flags will
# not be changed, they will not be deleted etc.  For offlineimap it will be like these
# messages do not exist.  This will perform an IMAP search in the case of IMAP or Gmail
# and therefor requires that the server support server side searching.  This will
# calculate the earliest day that would be included in the search and include all 
# messages from that day until today.   e.g. maxage = 3 to sync only the last 3 days mail

# maxage = 3

[Repository LocalTokutek]

type = IMAP
remotehost = tokulocal
port = 143
remoteuser = tokuleif
maxconnections = 1

[Repository GmailTokutek]

type = Gmail
remoteuser = leif@tokutek.com
remotepassfile = ~/.tokumail-passwd
maxconnections = 1
realdelete = no
folderfilter = lambda foldername: True
